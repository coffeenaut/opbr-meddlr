import{r as d,j as t}from"./index-aeb2edc2.js";const j=({nestedHeadings:m})=>{const[f,h]=d.useState(),x=({headings:i,activeId:o})=>t.jsx("ul",{children:i.map(r=>t.jsxs("li",{className:`heading-item ${r.id===o?"active":""}`,children:[t.jsx("a",{href:`#${r.id}`,onClick:e=>{e.preventDefault(),document.querySelector(`#${r.id}`).scrollIntoView({behavior:"smooth"})},children:r.title}),r.items.length>0&&t.jsx("ul",{children:r.items.map(e=>t.jsx("li",{className:`heading-item ${e.id===o?"active":""}`,children:t.jsx("a",{href:`#${e.id}`,onClick:a=>{a.preventDefault(),document.querySelector(`#${e.id}`).scrollIntoView({behavior:"smooth"})},children:e.title})},e.id))})]},r.id))});return(i=>{const o=d.useRef({});d.useEffect(()=>{const r=l=>{o.current=l.reduce((n,s)=>(n[s.target.id]=s,n),o.current);const c=[];Object.keys(o.current).forEach(n=>{const s=o.current[n];s.isIntersecting&&c.push(s)});const u=n=>a.findIndex(s=>s.id===n);if(c.length===1)i(c[0].target.id);else if(c.length>1){const n=c.sort((s,g)=>u(s.target.id)>u(g.target.id));i(n[0].target.id)}},e=new IntersectionObserver(r,{root:document,rootMargin:"100px"}),a=Array.from(document.querySelectorAll("h2, h3"));return a.forEach(l=>e.observe(l)),()=>e.disconnect()},[i])})(h),t.jsx(t.Fragment,{children:t.jsx("nav",{"aria-label":"Table of contents",children:t.jsx(x,{headings:m,activeId:f})})})};export{j as P};
